set nocompatible
filetype off
syntax on
set exrc
set number
set relativenumber
set visualbell
set backspace=indent,eol,start

set directory=~/.vim/swapfiles//

set rtp+=/usr/local/opt/fzf
set rtp+=~/.fzf

call plug#begin('~/.vim/bundle')

Plug 'mattn/emmet-vim'
function! HtmlExpander()
    let line   = getline(".")
    let col    = col(".")
    let first  = line[col-2]
    let second = line[col-1]
    let third  = line[col]

    if first ==# ">"
        if second ==# "<" && third ==# "/"
            return "\<CR>\<C-o>==\<C-o>O"

        else
            return "\<CR>"

        endif

    else
        return "\<CR>"
    endif
endfunction
autocmd Filetype html inoremap <buffer> <expr> <CR> HtmlExpander()
" autocmd FileType cs set omnifunc=OmniSharp#Complete

Plug 'OmniSharp/omnisharp-vim'
Plug 'tpope/vim-dispatch'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1
Plug 'deoplete-plugins/deoplete-jedi'
" <TAB> completion
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><s-TAB>  pumvisible() ? "\<C-p>" : "\<s-TAB>"

Plug 'jiangmiao/auto-pairs'
let g:AutoPairsMapSpace = 0
Plug 'scrooloose/nerdtree'
map <c-g> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
nmap <c-space> :FZF<CR>
nmap <c-@> <c-space>

Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'leafgarland/typescript-vim'
Plug 'Quramy/vim-js-pretty-template'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'Quramy/tsuquyomi'
Plug 'ianks/vim-tsx'
Plug 'derekwyatt/vim-scala'
let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''

let g:tsuquyomi_disable_quickfix = 1

let g:ale_completion_enabled = 0
let g:ale_linters = {
\       'javascript': ['eslint', 'flow', 'flow-language-server'],
\       'python': ['mypy'],
\       'cs': ['OmniSharp']
\}
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'typescript': ['prettier'],
\   'css': ['prettier'],
\}
Plug 'w0rp/ale'

Plug 'Vimjas/vim-python-pep8-indent'
let g:pymode_indent = 0
Plug 'tomasiser/vim-code-dark'
set t_Co=256
set t_ut=

call plug#end()
filetype plugin indent on

set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab autoindent

silent! colorscheme codedark
highlight Comment cterm=italic
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

hi MatchParen cterm=bold ctermbg=none ctermfg=none
hi MatchParen term=underline cterm=underline gui=underline

autocmd BufNewFile,BufRead *.cts set filetype=typescript
autocmd BufNewFile,BufRead *.mts set filetype=typescript
autocmd FileType c,cpp,java,scala,js,ts,jsx,tsx,cts,cjs,mts,mjs,py,html,xml,json,cs,fs autocmd BufWritePre <buffer> %s/\s\+$//e
set completeopt=menuone,preview,noselect
let $NVIM_PYTHON_LOG_FILE="/tmp/nvim_log"
let $NVIM_PYTHON_LOG_LEVEL="DEBUG"

augroup omnisharp_commands
  autocmd!

  " Show type information automatically when the cursor stops moving.
  " Note that the type is echoed to the Vim command line, and will overwrite
  " any other messages in this space including e.g. ALE linting messages.
  autocmd CursorHold *.cs OmniSharpTypeLookup

  " The following commands are contextual, based on the cursor position.
  autocmd FileType cs nmap <silent> <buffer> gd <Plug>(omnisharp_go_to_definition)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osfu <Plug>(omnisharp_find_usages)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osfi <Plug>(omnisharp_find_implementations)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ospd <Plug>(omnisharp_preview_definition)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ospi <Plug>(omnisharp_preview_implementations)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ost <Plug>(omnisharp_type_lookup)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osd <Plug>(omnisharp_documentation)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osfs <Plug>(omnisharp_find_symbol)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osfx <Plug>(omnisharp_fix_usings)
  autocmd FileType cs nmap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)
  autocmd FileType cs imap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)

  " Navigate up and down by method/property/field
  autocmd FileType cs nmap <silent> <buffer> [[ <Plug>(omnisharp_navigate_up)
  autocmd FileType cs nmap <silent> <buffer> ]] <Plug>(omnisharp_navigate_down)
  " Find all code errors/warnings for the current solution and populate the quickfix window
  autocmd FileType cs nmap <silent> <buffer> <Leader>osgcc <Plug>(omnisharp_global_code_check)
  " Contextual code actions (uses fzf, vim-clap, CtrlP or unite.vim selector when available)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osca <Plug>(omnisharp_code_actions)
  autocmd FileType cs xmap <silent> <buffer> <Leader>osca <Plug>(omnisharp_code_actions)
  " Repeat the last code action performed (does not use a selector)
  autocmd FileType cs nmap <silent> <buffer> <Leader>os. <Plug>(omnisharp_code_action_repeat)
  autocmd FileType cs xmap <silent> <buffer> <Leader>os. <Plug>(omnisharp_code_action_repeat)

  autocmd FileType cs nmap <silent> <buffer> <Leader>os= <Plug>(omnisharp_code_format)

  autocmd FileType cs nmap <silent> <buffer> <Leader>osnm <Plug>(omnisharp_rename)

  autocmd FileType cs nmap <silent> <buffer> <Leader>osre <Plug>(omnisharp_restart_server)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osst <Plug>(omnisharp_start_server)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ossp <Plug>(omnisharp_stop_server)
augroup END
