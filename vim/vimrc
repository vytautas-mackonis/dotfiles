set nocompatible
filetype off
syntax on
set exrc
set number
set relativenumber

set directory=~/.vim/swapfiles//

set rtp+=/usr/local/opt/fzf
set rtp+=~/.fzf


call plug#begin('~/.vim/bundle')

Plug 'mattn/emmet-vim'
function! HtmlExpander()
    let line   = getline(".")
    let col    = col(".")
    let first  = line[col-2]
    let second = line[col-1]
    let third  = line[col]

    if first ==# ">"
        if second ==# "<" && third ==# "/"
            return "\<CR>\<C-o>==\<C-o>O"

        else
            return "\<CR>"

        endif

    else
        return "\<CR>"
    endif
endfunction
autocmd Filetype html inoremap <buffer> <expr> <CR> HtmlExpander()
autocmd FileType cs set omnifunc=OmniSharp#Complete

Plug 'OmniSharp/omnisharp-vim'
let g:OmniSharp_server_type = 'roslyn'
let g:OmniSharp_timeout = 10
let g:syntastic_cs_checkers = ['code_checker']
Plug 'OrangeT/vim-csharp'

Plug 'tpope/vim-dispatch'
Plug 'Valloric/YouCompleteMe', { 'do': 'python install.py --tern-completer' }
set completeopt-=preview
let g:ycm_auto_start_csharp_server = 0
let g:ycm_auto_stop_csharp_server = 0

Plug 'jiangmiao/auto-pairs'
let g:AutoPairsMapSpace = 0
Plug 'scrooloose/nerdtree'
map <c-g> :NERDTreeToggle<CR>
Plug 'junegunn/fzf.vim'
nmap <c-space> :FZF<CR>
nmap <c-@> <c-space>
"imap <c-space> <c-x><c-o>
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
            \ "\<lt>C-n>" :
            \ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
            \ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
            \ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
imap <c-@> <c-space>

Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'leafgarland/typescript-vim'
Plug 'Quramy/vim-js-pretty-template'
Plug 'pangloss/vim-javascript'
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'Quramy/tsuquyomi'
let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''

let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker."

Plug 'vim-syntastic/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute " ,"trimming empty <", "unescaped &" , "lacks \"action", "is not recognized!", "discarding unexpected"]"]

Plug 'tomasiser/vim-code-dark'
set t_Co=256
set t_ut=

call plug#end()
filetype plugin indent on

set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab autoindent

" Unbind the cursor keys in insert, normal and visual modes.
for prefix in ['i', 'n', 'v']
    for key in ['<Up>', '<Down>', '<Left>', '<Right>']
        exe prefix . "noremap " . key . " <Nop>"
    endfor
endfor

silent! colorscheme codedark
highlight Comment cterm=italic
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

hi MatchParen cterm=bold ctermbg=none ctermfg=none
hi MatchParen term=underline cterm=underline gui=underline
